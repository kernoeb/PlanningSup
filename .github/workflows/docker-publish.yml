name: Docker

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

# Prevent overlapping publishes for the same ref
concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: false

env:
  # Google Artifact Registry
  GCP_REGION: europe-west1
  AR_REPO_NAME: planningsup
  AR_IMAGE_NAME: planningsup

  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: planning

  # YAML array (exact branch names) allowed to publish on PRs (same-repo only)
  PUBLISH_PR_WHITELIST: |
    - refactor/elysia-postgresql

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write # Required for Google Cloud authentication
      security-events: write
      pull-requests: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Determine publish eligibility
        id: publish
        shell: bash
        run: |
          CAN=false
          if [[ "${{ github.event_name }}" != "pull_request" ]]; then
            CAN=true
          elif [[ "${{ github.event.pull_request.head.repo.full_name }}" == "${{ github.repository }}" && -n "${{ github.head_ref }}" ]]; then
            WHITELIST="${{ env.PUBLISH_PR_WHITELIST }}"
            if echo "$WHITELIST" | grep -q "^ *- ${{ github.head_ref }}$"; then
              CAN=true
            fi
          fi
          echo "can_publish=$CAN" >> "$GITHUB_OUTPUT"
          echo "Computed can_publish=$CAN"

      - name: Compute branch slug
        id: branch
        shell: bash
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          if [[ ! "$BRANCH" =~ ^[A-Za-z0-9/_.-]+$ ]]; then
            echo "::error::Invalid branch name: $BRANCH"
            exit 1
          fi
          SLUG=$(echo "$BRANCH"
            | tr '[:upper:]' '[:lower:]'
            | sed -E 's/[^a-z0-9._-]+/-/g; s/^-+|-+$//g'
            | cut -c1-128)
          if [[ -z "$SLUG" ]]; then
            echo "::error::Empty slug produced"
            exit 1
          fi
          echo "BRANCH_SLUG=$SLUG" >> "$GITHUB_ENV"
          echo "Branch: $BRANCH -> Slug: $SLUG"

      - name: Derive lowercase image paths
        id: image_paths
        run: |
          echo "ghcr=$(echo "${{ env.GHCR_REGISTRY }}/${{ github.repository }}/${{ env.GHCR_IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"
          echo "artifact_registry=$(echo "${{ env.GCP_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.AR_IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')" >> "$GITHUB_OUTPUT"

      - name: Authenticate to Google Cloud
        if: steps.publish.outputs.can_publish == 'true'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'
          # This configures the docker credential helper for Artifact Registry
          create_credentials_file: true

      - name: Log into GHCR
        if: steps.publish.outputs.can_publish == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.image_paths.outputs.ghcr }}
            ${{ steps.image_paths.outputs.artifact_registry }}
          flavor: latest=false
          tags: |
            type=ref,event=tag
            type=semver,pattern=latest
            type=ref,event=branch
          labels: |
            org.opencontainers.image.title=PlanningSup
            org.opencontainers.image.description=Planning application
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.vendor=kernoeb
            org.opencontainers.image.created=${{ github.run_started_at }}

      - name: Show planned tags
        run: |
          echo "Base (GHCR): ${{ steps.image_paths.outputs.ghcr }}"
          echo "Base (Artifact Registry): ${{ steps.image_paths.outputs.artifact_registry }}"
          echo "Slug: ${{ env.BRANCH_SLUG }}"
          echo "Metadata tags:"
          printf "  %s\n" "${{ steps.meta.outputs.tags }}"
          echo "Will publish? ${{ steps.publish.outputs.can_publish }}"

      - name: Build test image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          platforms: linux/amd64
          tags: test-${{ env.AR_IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false
          sbom: false

      - name: Vulnerability scan (test image)
        uses: docker/scout-action@v1
        with:
          command: cves
          image: test-${{ env.AR_IMAGE_NAME }}:${{ github.sha }}
          only-severities: critical,high
          exit-code: true

      - name: Build and push production images
        id: build_and_push
        if: steps.publish.outputs.can_publish == 'true'
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.image_paths.outputs.ghcr }}:${{ env.BRANCH_SLUG }}
            ${{ steps.image_paths.outputs.artifact_registry }}:${{ env.BRANCH_SLUG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: true
          sbom: true
          build-args: |
            BUILDTIME=${{ github.run_started_at }}
            VERSION=${{ github.sha }}

      - name: Attest build provenance
        if: steps.publish.outputs.can_publish == 'true' && steps.build_and_push.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ steps.image_paths.outputs.artifact_registry }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

      - name: Summary
        if: always()
        run: |
          echo "::group::Build Summary"
          echo "Event:                ${{ github.event_name }}"
          echo "Ref:                  ${{ github.ref }}"
          echo "Head ref:             ${{ github.head_ref }}"
          echo "Branch slug:          ${{ env.BRANCH_SLUG }}"
          echo "Can publish:          ${{ steps.publish.outputs.can_publish }}"
          echo "GHCR base:            ${{ steps.image_paths.outputs.ghcr }}"
          echo "Artifact Registry base: ${{ steps.image_paths.outputs.artifact_registry }}"
          echo "Metadata tags:"
          printf "  %s\n" "${{ steps.meta.outputs.tags }}"
          if [[ -n "${{ steps.build_and_push.outputs.digest }}" ]]; then
            echo "Published digest:     ${{ steps.build_and_push.outputs.digest }}"
          else
            echo "Published digest:     (none)"
          fi
          echo "::endgroup::"
