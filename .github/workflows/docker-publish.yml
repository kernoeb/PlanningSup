name: Docker

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: planning
  DOCKERHUB_IMAGE: kernoeb/planningsup
  # JSON array of PR branch names allowed to push images (same-repo PRs only)
  PUBLISH_PR_WHITELIST: '["refactor/elysia-postgresql"]'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute branch slug
        id: branch
        shell: bash
        run: |
          BRANCH="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME}}"
          SLUG=$(echo "$BRANCH" | tr '[:upper:]' '[:lower:]' | sed -E 's/[^a-z0-9._-]+/-/g; s/^-+|-+$//g' | cut -c1-128)
          echo "BRANCH_SLUG=$SLUG" >> "$GITHUB_ENV"
          if [ -n "${GITHUB_HEAD_REF}" ]; then
            echo "FULL_REF=refs/heads/${GITHUB_HEAD_REF}" >> "$GITHUB_ENV"
          else
            echo "FULL_REF=${GITHUB_REF}" >> "$GITHUB_ENV"
          fi
          echo "Branch slug: $SLUG"

      - name: Derive lowercase GHCR image path
        id: ghcr_path
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.IMAGE_NAME }}

      # Login to GHCR (conditional on push criteria)
      - name: Log into GHCR
        if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.head_ref != '' && contains(fromJSON(env.PUBLISH_PR_WHITELIST), github.head_ref))
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Login to Docker Hub (only for non-PR events, or allowed same-repo PRs in whitelist)
      - name: Log into Docker Hub
        if: github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.head_ref != '' && contains(fromJSON(env.PUBLISH_PR_WHITELIST), github.head_ref))
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Extract metadata for BOTH registries (GHCR + Docker Hub)
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ steps.ghcr_path.outputs.lowercase }}
            ${{ env.DOCKERHUB_IMAGE }}
          ref: ${{ env.FULL_REF }}
          flavor: |
            latest=false
          tags: |
            # Semver tags on version refs (v1.2.3, v1.2, v1)
            type=ref,event=tag
            # Branch tag (main, feature-*). Includes PR head ref when building PR
            type=ref,event=branch
            # PR tag (pr-123)
            type=ref,event=pr
            # Short SHA
            type=sha,format=short

      - name: Show planned tags (debug)
        run: |
          echo "Generated tags:"
          echo "${{ steps.meta.outputs.tags }}"
          echo "Labels:"
            echo "${{ steps.meta.outputs.labels }}"

      # Local test build (fast failure feedback, no push)
      - name: Build test image (no push)
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          tags: test-${{ env.IMAGE_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Build & Push (conditionally) to BOTH GHCR and Docker Hub
      - name: Build and push images
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.head_ref != '' && contains(fromJSON(env.PUBLISH_PR_WHITELIST), github.head_ref)) }}
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ steps.ghcr_path.outputs.lowercase }}:${{ env.BRANCH_SLUG }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Attest provenance for GHCR image
      - name: Attest build provenance (GHCR)
        if: steps.build_and_push.outputs.digest != '' && (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.head_ref != '' && contains(fromJSON(env.PUBLISH_PR_WHITELIST), github.head_ref)))
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: ${{ steps.ghcr_path.outputs.lowercase }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

      # Attest provenance for Docker Hub image
      - name: Attest build provenance (Docker Hub)
        if: steps.build_and_push.outputs.digest != '' && (github.event_name != 'pull_request' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository && github.head_ref != '' && contains(fromJSON(env.PUBLISH_PR_WHITELIST), github.head_ref)))
        uses: actions/attest-build-provenance@v3
        with:
          subject-name: index.docker.io/${{ env.DOCKERHUB_IMAGE }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

      - name: Summary
        if: always()
        run: |
          echo "Digest: ${{ steps.build_and_push.outputs.digest }}"
          echo "GHCR base image: ${{ steps.ghcr_path.outputs.lowercase }}"
          echo "Docker Hub image: ${{ env.DOCKERHUB_IMAGE }}"
          echo "Branch slug: ${{ env.BRANCH_SLUG }}"
          echo "Event: ${{ github.event_name }}"
