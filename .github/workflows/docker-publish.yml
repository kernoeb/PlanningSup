name: Docker

on:
  push:
    branches: ['**']
    tags: ['v*.*.*']
  pull_request:
    branches: ['**']

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: false

env:
  # Google Artifact Registry
  GCP_PROJECT_ID: planningsup
  GCP_REGION: europe-west1
  AR_REPO_NAME: planningsup
  AR_IMAGE_NAME: planningsup

  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: planning

  # Whitelist of branches that are allowed to be published on push
  PUBLISH_WHITELIST: |
    main
    refactor/elysia-postgresql

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write # Required for Google Cloud authentication
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check branch whitelist
        id: whitelist_check
        if: (github.event_name == 'push' && startsWith(github.ref, 'refs/heads/')) || github.event_name == 'pull_request'
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BRANCH_NAME="${{ github.head_ref }}"
          else
            BRANCH_NAME="${{ github.ref_name }}"
          fi
          WHITELIST="${{ env.PUBLISH_WHITELIST }}"
          echo "Checking if '$BRANCH_NAME' is in the whitelist..."
          if echo "$WHITELIST" | grep -Fxq "$BRANCH_NAME"; then
            echo "is_whitelisted=true" >> "$GITHUB_OUTPUT"
            echo "Result: Yes"
          else
            echo "is_whitelisted=false" >> "$GITHUB_OUTPUT"
            echo "Result: No"
          fi

      - name: Authenticate to Google Cloud
        uses: 'google-github-actions/auth@v2'
        # Only authenticate when we intend to publish
        if: steps.whitelist_check.outputs.is_whitelisted == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        with:
          workload_identity_provider: '${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.GCP_SERVICE_ACCOUNT }}'

      - name: Log into Artifact Registry and GHCR
        # Only log in when we intend to publish
        if: steps.whitelist_check.outputs.is_whitelisted == 'true' || github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
        run: |
          # Log into Artifact Registry
          gcloud auth configure-docker ${{ env.GCP_REGION }}-docker.pkg.dev
          # Log into GHCR
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.GHCR_REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.GHCR_IMAGE_NAME }}
            ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.AR_IMAGE_NAME }}
          tags: |
            # On a push to a whitelisted branch, create a tag named after the branch
            type=ref,event=branch,enable=${{ steps.whitelist_check.outputs.is_whitelisted == 'true' }}
            # Create semver tags for git tags
            type=semver,pattern={{version}}
            # Create a tag for pull requests, like 'pr-123'
            type=ref,event=pr,prefix=pr-,enable=${{ steps.whitelist_check.outputs.is_whitelisted == 'true' }}

      - name: Build and push image
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          # Push on whitelisted branches or tag pushes
          push: ${{ steps.whitelist_check.outputs.is_whitelisted == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')) }}
          # Load locally when not pushing to avoid buildx warning
          load: ${{ !(steps.whitelist_check.outputs.is_whitelisted == 'true' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))) }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest build provenance
        if: steps.build_and_push.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GCP_REGION }}-docker.pkg.dev/${{ env.GCP_PROJECT_ID }}/${{ env.AR_REPO_NAME }}/${{ env.AR_IMAGE_NAME }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true
