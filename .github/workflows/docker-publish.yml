name: Docker

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

concurrency:
  group: docker-${{ github.ref }}
  cancel-in-progress: false

env:
  # GitHub Container Registry
  GHCR_REGISTRY: ghcr.io
  GHCR_IMAGE_NAME: planningsup/planning

  # Whitelist of branches that are allowed to be published on push
  PUBLISH_WHITELIST: |
    main
    refactor/elysia-postgresql

  # Security context
  IS_FORK_PR: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository }}
  IS_PUBLISH_EVENT: ${{ github.event_name == 'push' && (github.ref_type == 'branch' || github.ref_type == 'tag') }}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify PR safety
        if: github.event_name == 'pull_request'
        run: |
          echo "This is a PR build - images will be built but not pushed"
          echo "PR from: ${{ github.event.pull_request.head.repo.full_name }}"
          echo "Base repo: ${{ github.repository }}"
          if [[ "${{ env.IS_FORK_PR }}" == "true" ]]; then
            echo "⚠️  This is a fork PR - extra security restrictions apply"
          fi

      - name: Check branch whitelist and tag validation
        id: publish_check
        run: |
          # Initialize all outputs as false
          echo "is_whitelisted=false" >> "$GITHUB_OUTPUT"
          echo "is_valid_tag=false" >> "$GITHUB_OUTPUT"
          echo "should_publish=false" >> "$GITHUB_OUTPUT"

          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == refs/heads/* ]]; then
              BRANCH_NAME="${{ github.ref_name }}"
              WHITELIST="${{ env.PUBLISH_WHITELIST }}"
              echo "Checking if branch '$BRANCH_NAME' is in the whitelist..."
              if echo "$WHITELIST" | grep -Fxq "$BRANCH_NAME"; then
                echo "is_whitelisted=true" >> "$GITHUB_OUTPUT"
                echo "should_publish=true" >> "$GITHUB_OUTPUT"
                echo "✅ Branch '$BRANCH_NAME' is whitelisted for publishing"
              else
                echo "❌ Branch '$BRANCH_NAME' is not whitelisted for publishing"
              fi
            elif [[ "${{ github.ref }}" == refs/tags/v*.*.* ]]; then
              echo "Validating tag: ${{ github.ref_name }}"
              if [[ "${{ github.ref_name }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "is_valid_tag=true" >> "$GITHUB_OUTPUT"
                echo "should_publish=true" >> "$GITHUB_OUTPUT"
                echo "✅ Valid semver tag: ${{ github.ref_name }}"
              else
                echo "❌ Invalid tag format: ${{ github.ref_name }} (expected: v*.*.* semver)"
              fi
            else
              echo "❌ Push event but not a branch or valid tag"
            fi
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check if PR is from a whitelisted branch
            SOURCE_BRANCH="${{ github.head_ref }}"
            WHITELIST="${{ env.PUBLISH_WHITELIST }}"
            echo "Checking if PR source branch '$SOURCE_BRANCH' is in the whitelist..."
            if echo "$WHITELIST" | grep -Fxq "$SOURCE_BRANCH"; then
              echo "is_whitelisted=true" >> "$GITHUB_OUTPUT"
              echo "should_publish=true" >> "$GITHUB_OUTPUT"
              echo "✅ PR from whitelisted branch '$SOURCE_BRANCH' - publishing enabled"
            else
              echo "❌ PR from non-whitelisted branch '$SOURCE_BRANCH'"
            fi
          else
            echo "ℹ️  Not a push or PR event - build only, no publishing"
          fi

          # Final safety check - never publish from fork PRs
          if [[ "${{ env.IS_FORK_PR }}" == "true" ]]; then
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            echo "🔒 Fork PR detected - publishing disabled for security"
          fi

      - name: Log into GitHub Container Registry
        if: steps.publish_check.outputs.should_publish == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.GHCR_IMAGE_NAME }}
          tags: |
            # On a push to a whitelisted branch, create a tag named after the branch
            type=ref,event=branch,enable=${{ steps.publish_check.outputs.is_whitelisted == 'true' }}
            # Create semver tags for valid git tags
            type=semver,pattern={{version}},enable=${{ steps.publish_check.outputs.is_valid_tag == 'true' }}
            # For PRs from whitelisted branches, use the source branch name as tag (replace slashes with dashes)
            type=raw,value=${{ github.head_ref }},enable=${{ github.event_name == 'pull_request' && steps.publish_check.outputs.is_whitelisted == 'true' }}

      - name: Build and push image
        id: build_and_push
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          # Only push when explicitly allowed and safe
          push: ${{ steps.publish_check.outputs.should_publish == 'true' }}
          # Load locally when not pushing to avoid buildx warning
          load: ${{ steps.publish_check.outputs.should_publish != 'true' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Attest build provenance
        if: steps.publish_check.outputs.should_publish == 'true' && steps.build_and_push.outputs.digest != ''
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ github.repository_owner }}/${{ env.GHCR_IMAGE_NAME }}
          subject-digest: ${{ steps.build_and_push.outputs.digest }}
          push-to-registry: true

      - name: Build summary
        if: always()
        run: |
          echo "## Docker Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Event Type | ${{ github.event_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Ref | ${{ github.ref }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Source Branch | ${{ github.head_ref || github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Fork PR | ${{ env.IS_FORK_PR }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Whitelisted Branch | ${{ steps.publish_check.outputs.is_whitelisted }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Is Valid Tag | ${{ steps.publish_check.outputs.is_valid_tag }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Should Publish | ${{ steps.publish_check.outputs.should_publish }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Image Tags | ${{ steps.meta.outputs.tags }} |" >> $GITHUB_STEP_SUMMARY
