/// <reference lib="webworker" />

// --- IMPORTS ---
import { CacheableResponsePlugin } from 'workbox-cacheable-response'
import { ExpirationPlugin } from 'workbox-expiration'
import { cleanupOutdatedCaches, createHandlerBoundToURL, precacheAndRoute } from 'workbox-precaching'
import { NavigationRoute, registerRoute } from 'workbox-routing'
import { NetworkFirst, NetworkOnly } from 'workbox-strategies'

// --- SETUP ---
declare let self: ServiceWorkerGlobalScope

// Precache all of the assets generated by your build process.
precacheAndRoute(self.__WB_MANIFEST)

// Cleans up old caches to manage storage.
cleanupOutdatedCaches()

// Allowlist for development mode to handle HMR.
let allowlist: RegExp[] | undefined
if (import.meta.env.DEV) allowlist = [/^\/$/]

// --- SERVICE WORKER LIFECYCLE ---
self.addEventListener('install', () => {
  self.skipWaiting()
})

self.addEventListener('activate', (event) => {
  event.waitUntil(self.clients.claim())
})

// --- ROUTING ---

// 1. API CACHING FOR 'GET' REQUESTS (Specific)
registerRoute(
  ({ url, request }) =>
    url.pathname.startsWith('/api/plannings') && request.method === 'GET',
  new NetworkFirst({
    cacheName: 'api-plannings',
    networkTimeoutSeconds: 5,
    plugins: [
      new CacheableResponsePlugin({
        statuses: [0, 200],
      }),
      new ExpirationPlugin({
        maxEntries: 50,
        maxAgeSeconds: 60 * 60 * 24, // 1 day
      }),
      {
        handlerDidError: async () => {
          return new Response(
            JSON.stringify({ error: 'Data not available while offline.' }),
            {
              status: 503,
              headers: { 'Content-Type': 'application/json' },
            },
          )
        },
      },
    ],
  }),
)

// 2. API CACHE INVALIDATION FOR 'POST/PUT/DELETE' (Specific)
registerRoute(
  ({ url, request }) =>
    url.pathname.startsWith('/api/plannings') && request.method !== 'GET',
  new NetworkOnly({
    plugins: [
      {
        // CORRECTED: The callback must return the response.
        fetchDidSucceed: async ({ response }) => {
          // Perform the side effect of clearing the cache.
          console.log('Modification request successful, clearing API cache.')
          await caches.delete('api-plannings')

          // Return the original response to the browser.
          return response
        },
      },
    ],
  }),
)

// 3. GENERAL NAVIGATION FALLBACK (General)
registerRoute(new NavigationRoute(
  createHandlerBoundToURL('index.html'),
  {
    allowlist,
    denylist: [
      /^\/api\//, // Deny any path starting with /api/
      /\.[^/?]+$/, // Deny any path that looks like it has a file extension
    ],
  },
))
